// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Table$VoteUSReason = require("./Table.bs.js");
var Utils$VoteUSReason = require("./Utils.bs.js");
var Defaults$VoteUSReason = require("./Defaults.bs.js");
var TypeInfo$VoteUSReason = require("./TypeInfo.bs.js");
var LeftPaddedButton$VoteUSReason = require("./ui/LeftPaddedButton.bs.js");

var component = ReasonReact.statelessComponent("Matches");

var tableType = "matches";

var matchTableColumns = /* array */[
  Utils$VoteUSReason.thcCreator("Driver", "uuid_driver", 100),
  Utils$VoteUSReason.thcCreator("Rider", "uuid_rider", 100),
  Utils$VoteUSReason.thcCreator("City", "city", 100),
  Utils$VoteUSReason.thcCreator("State", "full_state", 100),
  Utils$VoteUSReason.thcCreator("StateShort", "state", 100),
  Utils$VoteUSReason.thcCreator("Status", "status", 100),
  Utils$VoteUSReason.thcCreator("Created", "created_ts", 160),
  Utils$VoteUSReason.thcCreator("Updated", "last_updated_ts", 160),
  Utils$VoteUSReason.thcCreator("DriverCollectionZIP", "DriverCollectionZIP", 100),
  Utils$VoteUSReason.thcCreator("Drive Times - Local", "AvailableDriveTimesLocal", 160),
  Utils$VoteUSReason.thcCreator("Seat Count", "SeatCount", 100),
  Utils$VoteUSReason.thcCreator("License Number", "DriverLicenseNumber", 100),
  Utils$VoteUSReason.thcCreator("Driving for Organization", "DrivingOBOOrganizationName", 100),
  Utils$VoteUSReason.thcCreator("Driver First Name", "DriverFirstName", 100),
  Utils$VoteUSReason.thcCreator("Driver Last Name", "DriverLastName", 100),
  Utils$VoteUSReason.thcCreator("Rider First Name", "RiderFirstName", 100),
  Utils$VoteUSReason.thcCreator("Rider Last Name", "RiderLastName", 100),
  Utils$VoteUSReason.thcCreator("Rider Email", "RiderEmail", 100),
  Utils$VoteUSReason.thcCreator("Rider Phone", "RiderPhone", 100),
  Utils$VoteUSReason.thcCreator("Rider Collection ZIP", "RiderCollectionZIP", 100),
  Utils$VoteUSReason.thcCreator("Rider Dropoff ZIP", "RiderDropOffZIP", 100),
  Utils$VoteUSReason.thcCreator("Rider Collection Street Number", "RiderCollectionStreetNumber", 100),
  Utils$VoteUSReason.thcCreator("Rider Collection Address", "RiderCollectionAddress", 100),
  Utils$VoteUSReason.thcCreator("Rider Destination Address", "RiderDestinationAddress", 100),
  Utils$VoteUSReason.thcCreator("Ride Times Local", "AvailableRideTimesLocal", 160),
  Utils$VoteUSReason.thcCreator("Driver Notes", "driver_notes", 100),
  Utils$VoteUSReason.thcCreator("Rider Notes", "rider_notes", 100),
  Utils$VoteUSReason.thcCreator("Score", "score", 100)
];

function tableMatch(itemDetails) {
  return {
          status: itemDetails.status,
          uuid_driver: itemDetails.uuid_driver,
          uuid_rider: itemDetails.uuid_rider,
          city: itemDetails.city,
          full_state: itemDetails.full_state,
          state: itemDetails.state,
          DriverCollectionZIP: itemDetails.DriverCollectionZIP,
          AvailableDriveTimesLocal: itemDetails.AvailableDriveTimesLocal,
          SeatCount: itemDetails.SeatCount,
          DriverLicenseNumber: itemDetails.DriverLicenseNumber,
          DrivingOBOOrganizationName: itemDetails.DrivingOBOOrganizationName,
          DriverFirstName: itemDetails.DriverFirstName,
          DriverLastName: itemDetails.DriverLastName,
          RiderFirstName: itemDetails.RiderFirstName,
          RiderEmail: itemDetails.RiderEmail,
          RiderLastName: itemDetails.RiderLastName,
          RiderPhone: itemDetails.RiderPhone,
          RiderCollectionZIP: itemDetails.RiderCollectionZIP,
          RiderDropOffZIP: itemDetails.RiderDropOffZIP,
          AvailableRideTimesLocal: itemDetails.AvailableRideTimesLocal,
          RiderCollectionStreetNumber: itemDetails.RiderCollectionStreetNumber,
          RiderCollectionAddress: itemDetails.RiderCollectionAddress,
          RiderDestinationAddress: itemDetails.RiderDestinationAddress,
          driver_notes: itemDetails.driver_notes,
          rider_notes: itemDetails.rider_notes,
          created_ts: itemDetails.created_ts,
          last_updated_ts: itemDetails.last_updated_ts,
          score: itemDetails.score
        };
}

function make(others, sectionHeading, loginInfo, apiInfo, matchesInfo, getMatchesList, hideMatchesList, showMatchesListDownloadLink, hideMatchesListDownloadLink, setInfoMatchesList, hideExpiredMatchesList, hideConfirmedMatchesList, showCurrentMatch, hideCurrentMatch, showMatchForCurrentDriver, showMatchForCurrentRider, _children) {
  var matchesTableOnPageChangeHandler = function (pageIndex) {
    var pageSize = matchesInfo.listPageSize;
    return Utils$VoteUSReason.setInfoJs(setInfoMatchesList, pageIndex, pageSize);
  };
  var matchesTableOnPageChangeSizeHandler = function (size, pageIndex) {
    return Utils$VoteUSReason.setInfoJs(setInfoMatchesList, pageIndex, size);
  };
  var matchesTdPropsHandler = function (_state, rowInfoOption, _column, _instance) {
    var itemDriverUuid = rowInfoOption !== undefined ? Js_primitive.valFromOption(rowInfoOption).original.uuid_driver : "";
    var itemRiderUuid = rowInfoOption !== undefined ? Js_primitive.valFromOption(rowInfoOption).original.uuid_rider : "";
    var tableClickHandler = function (_e, handleOriginalOption) {
      if (rowInfoOption !== undefined) {
        var sr = function (fx,itemDetails){{ fx(itemDetails); return 0; }};
        var itemDetails = Js_primitive.valFromOption(rowInfoOption).original;
        var currentMatch = tableMatch(itemDetails);
        sr(showCurrentMatch, Js_primitive.some(currentMatch));
      } else {
        TypeInfo$VoteUSReason.unitArgAction(hideCurrentMatch);
      }
      if (handleOriginalOption !== undefined) {
        TypeInfo$VoteUSReason.unitArgAction(handleOriginalOption);
      }
      return /* () */0;
    };
    var getBkgColour = function (param) {
      if (itemDriverUuid === matchesInfo.currentMatch.uuid_driver && itemRiderUuid === matchesInfo.currentMatch.uuid_rider) {
        return Defaults$VoteUSReason.highlightSelectedRowBackgroundColour;
      } else {
        return Defaults$VoteUSReason.defaultRowBackgroundColour;
      }
    };
    var bkgStyle = {
      background: getBkgColour(/* () */0)
    };
    return {
            onClick: tableClickHandler,
            style: bkgStyle
          };
  };
  var matchesTableHideExpiredHandler = function (param) {
    TypeInfo$VoteUSReason.unitArgAction(hideExpiredMatchesList);
    return /* () */0;
  };
  var matchesTableHideConfirmedHandler = function (param) {
    TypeInfo$VoteUSReason.unitArgAction(hideConfirmedMatchesList);
    return /* () */0;
  };
  var matchesTableShowMatchForCurrentDriverHandler = function (param) {
    TypeInfo$VoteUSReason.unitArgAction(showMatchForCurrentDriver);
    return /* () */0;
  };
  var matchesTableShowMatchForCurrentRiderHandler = function (param) {
    TypeInfo$VoteUSReason.unitArgAction(showMatchForCurrentRider);
    return /* () */0;
  };
  var handleGetMatchListClick = function (_event) {
    var token = loginInfo.token;
    var url = apiInfo.apiUrl;
    var gl = function (fx,url,token){{ fx(url, token); return 0; }};
    gl(getMatchesList, url, token);
    return /* () */0;
  };
  var handleHideMatchListClick = function (_event) {
    TypeInfo$VoteUSReason.unitArgAction(hideMatchesList);
    return /* () */0;
  };
  var handleShowMatchesListDownloadLinkClick = function (_event) {
    var tableMatchesAll = $$Array.map(tableMatch, matchesInfo.matches);
    var createBlob = function (matches){{ 
      const jsonm = JSON.stringify(matches);
      const blob = new Blob([jsonm], { type: 'application/json' });
      const url = URL.createObjectURL(blob);

      return url; }};
    var urlBlob = createBlob(tableMatchesAll);
    TypeInfo$VoteUSReason.stringArgAction(showMatchesListDownloadLink, urlBlob);
    return /* () */0;
  };
  var handleHideMatchesListDownloadLinkClick = function (_event) {
    TypeInfo$VoteUSReason.unitArgAction(hideMatchesListDownloadLink);
    return /* () */0;
  };
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var tableMatchesAll = $$Array.map(tableMatch, matchesInfo.matches);
              var confirms = Utils$VoteUSReason.filterArray((function (m) {
                      return m.status === "MatchConfirmed";
                    }), tableMatchesAll);
              var confirmsKeys = $$Array.map((function (c) {
                      return c.uuid_rider;
                    }), confirms);
              var filterProposedAndConfirmed = function (m) {
                var s = m.status;
                var key = m.uuid_rider;
                if (s !== "MatchProposed" && s !== "ExtendedMatch") {
                  return true;
                } else if (s === "ExtendedMatch") {
                  return false;
                } else {
                  var keyMatched = function (k) {
                    return k === key;
                  };
                  return !Utils$VoteUSReason.existsArray(keyMatched, confirmsKeys);
                }
              };
              var filterExpiredMatches = function (matches) {
                if (matchesInfo.hideExpiredCanceled === true) {
                  var filterMatches = function (rider) {
                    if (rider.status !== "Expired") {
                      return rider.status !== "Canceled";
                    } else {
                      return false;
                    }
                  };
                  return Utils$VoteUSReason.filterArray(filterMatches, matches);
                } else {
                  return matches;
                }
              };
              var filterConfirmedMatches = function (matches) {
                if (matchesInfo.hideConfirmed === true) {
                  var filterMatches = function (match_) {
                    return match_.status !== "MatchConfirmed";
                  };
                  return Utils$VoteUSReason.filterArray(filterMatches, matches);
                } else {
                  return matches;
                }
              };
              var filterCurrentRiderMatches = function (matches) {
                if (matchesInfo.showMatchForCurrentRiderOnly === true) {
                  var currentRiderUuid = matchesInfo.currentRider.UUID;
                  console.log("filter matches by current rider" + currentRiderUuid);
                  var filterMatches = function (match_) {
                    return match_.uuid_rider === currentRiderUuid;
                  };
                  return Utils$VoteUSReason.filterArray(filterMatches, matches);
                } else {
                  return matches;
                }
              };
              var filterCurrentDriverMatches = function (matches) {
                if (matchesInfo.showMatchForCurrentDriverOnly === true) {
                  var currentDriverUuid = matchesInfo.currentDriver.UUID;
                  console.log("filter matches by current driver" + currentDriverUuid);
                  var filterMatches = function (match_) {
                    return match_.uuid_driver === currentDriverUuid;
                  };
                  return Utils$VoteUSReason.filterArray(filterMatches, matches);
                } else {
                  return matches;
                }
              };
              var tableMatchesStepZero = Utils$VoteUSReason.filterArray(filterProposedAndConfirmed, tableMatchesAll);
              var tableMatchesStepOne = filterExpiredMatches(tableMatchesStepZero);
              var tableMatchesStepTwo = filterConfirmedMatches(tableMatchesStepOne);
              var tableMatchesStepThree = filterCurrentRiderMatches(tableMatchesStepTwo);
              var tableMatches = filterCurrentDriverMatches(tableMatchesStepThree);
              var tableDivStyle = {
                marginTop: "20px",
                marginBottom: "10px"
              };
              var checkboxAreaStyle = {
                display: "inline-block",
                marginTop: "20px"
              };
              var checkboxLabelStyle = {
                paddingRight: "40px"
              };
              var currentMatchItemDivStyle = {
                marginBottom: "10px"
              };
              var currentMatchItemSpanStyle = {
                marginLeft: "10px"
              };
              var downloadLinkButtonSpanStyle = {
                marginLeft: "130px"
              };
              var downloadLinkAnchorStyle = {
                marginLeft: "15px"
              };
              var currentMatchStatusSpanStyle = function (status) {
                var match = status !== "MatchConfirmed";
                if (match) {
                  return {
                          marginLeft: "10px"
                        };
                } else {
                  return {
                          fontWeight: "700",
                          marginLeft: "10px"
                        };
                }
              };
              var currentMatchInfo = function (currentMatch) {
                return React.createElement("div", undefined, React.createElement("h3", undefined, "Current match info:"), React.createElement("div", {
                                style: currentMatchItemDivStyle
                              }, React.createElement("span", {
                                    style: currentMatchItemSpanStyle
                                  }, "Driver uuid: " + currentMatch.uuid_driver), React.createElement("span", {
                                    style: currentMatchItemSpanStyle
                                  }, currentMatch.DriverFirstName + (" " + currentMatch.DriverLastName))), React.createElement("div", {
                                style: currentMatchItemDivStyle
                              }, React.createElement("span", {
                                    style: currentMatchItemSpanStyle
                                  }, "Rider uuid: " + currentMatch.uuid_rider), React.createElement("span", {
                                    style: currentMatchItemSpanStyle
                                  }, currentMatch.RiderFirstName + (" " + currentMatch.RiderLastName)), React.createElement("span", {
                                    style: currentMatchItemSpanStyle
                                  }, currentMatch.RiderEmail)), React.createElement("div", {
                                style: currentMatchItemDivStyle
                              }, React.createElement("span", {
                                    style: currentMatchStatusSpanStyle(currentMatch.status)
                                  }, currentMatch.status)));
              };
              var downloadBlobName = others ? " - matches others - backup.json" : " - matches - backup.json";
              var tableMatchesJSX;
              if (matchesInfo.showMatchList) {
                var match = matchesInfo.showDownloadLink;
                var match$1 = matchesInfo.showCurrentMatchDetails;
                tableMatchesJSX = React.createElement("div", undefined, React.createElement("div", undefined, React.createElement("button", {
                              className: "button button--large",
                              id: "hideMatchListButton",
                              onClick: handleHideMatchListClick
                            }, "Hide List"), ReasonReact.element(undefined, undefined, LeftPaddedButton$VoteUSReason.make((function (prim, prim$1, prim$2) {
                                    return {
                                            className: prim,
                                            id: prim$1,
                                            onClick: prim$2
                                          };
                                  }), "button button--large", "refreshMatchesListButton", handleGetMatchListClick, /* array */["Refresh List"])), match ? React.createElement("span", {
                                style: downloadLinkButtonSpanStyle
                              }, ReasonReact.element(undefined, undefined, LeftPaddedButton$VoteUSReason.make((function (prim, prim$1, prim$2) {
                                          return {
                                                  className: prim,
                                                  id: prim$1,
                                                  onClick: prim$2
                                                };
                                        }), "button button--large", "hideMatchesListDownloadLinkButton", handleHideMatchesListDownloadLinkClick, /* array */["Hide Download Link"])), React.createElement("a", {
                                    className: "button button--large",
                                    style: downloadLinkAnchorStyle,
                                    download: loginInfo.details.username + downloadBlobName,
                                    href: matchesInfo.urlDownloadBlob
                                  }, "Download backup")) : React.createElement("span", {
                                style: downloadLinkButtonSpanStyle
                              }, ReasonReact.element(undefined, undefined, LeftPaddedButton$VoteUSReason.make((function (prim, prim$1, prim$2) {
                                          return {
                                                  className: prim,
                                                  id: prim$1,
                                                  onClick: prim$2
                                                };
                                        }), "button button--large", "showMatchesListDownloadLinkButton", handleShowMatchesListDownloadLinkClick, /* array */["Show Download Link"])))), React.createElement("div", undefined, React.createElement("div", {
                              className: "form-group checkbox",
                              style: checkboxAreaStyle
                            }, React.createElement("label", {
                                  className: "",
                                  style: checkboxLabelStyle,
                                  htmlFor: "hideExpired"
                                }, "Hide Expired/Cancelled"), React.createElement("input", {
                                  className: "",
                                  id: "hideExpired",
                                  checked: matchesInfo.hideExpiredCanceled,
                                  type: "checkbox",
                                  onChange: matchesTableHideExpiredHandler
                                })), React.createElement("div", {
                              className: "form-group checkbox",
                              style: checkboxAreaStyle
                            }, React.createElement("label", {
                                  className: "",
                                  style: checkboxLabelStyle,
                                  htmlFor: "hideConfirmed"
                                }, "Hide Confirmed"), React.createElement("input", {
                                  className: "",
                                  id: "hideConfirmed",
                                  checked: matchesInfo.hideConfirmed,
                                  type: "checkbox",
                                  onChange: matchesTableHideConfirmedHandler
                                })), React.createElement("span", undefined, React.createElement("div", {
                                  className: "form-group checkbox",
                                  style: checkboxAreaStyle
                                }, React.createElement("label", {
                                      className: "",
                                      style: checkboxLabelStyle,
                                      htmlFor: "showMatchForCurrentDriverOnly"
                                    }, "Show Match For Current Driver Only"), React.createElement("input", {
                                      className: "",
                                      id: "showMatchForCurrentDriverOnly",
                                      checked: matchesInfo.showMatchForCurrentDriverOnly,
                                      type: "checkbox",
                                      onChange: matchesTableShowMatchForCurrentDriverHandler
                                    })), React.createElement("div", {
                                  className: "form-group checkbox",
                                  style: checkboxAreaStyle
                                }, React.createElement("label", {
                                      className: "",
                                      style: checkboxLabelStyle,
                                      htmlFor: "showMatchForCurrentRiderOnly"
                                    }, "Show Match For Current Rider Only"), React.createElement("input", {
                                      className: "",
                                      id: "showMatchForCurrentRiderOnly",
                                      checked: matchesInfo.showMatchForCurrentRiderOnly,
                                      type: "checkbox",
                                      onChange: matchesTableShowMatchForCurrentRiderHandler
                                    })))), React.createElement("div", {
                          style: tableDivStyle
                        }, ReasonReact.element(undefined, undefined, Table$VoteUSReason.make((function (prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9) {
                                    return {
                                            className: prim,
                                            type: prim$1,
                                            columns: prim$2,
                                            defaultPageSize: prim$3,
                                            pageSize: prim$4,
                                            filterable: prim$5,
                                            data: prim$6,
                                            onPageChange: prim$7,
                                            onPageSizeChange: prim$8,
                                            getTdProps: prim$9
                                          };
                                  }), "basicMatchTable", tableType, 5, matchesInfo.listPageSize, true, matchTableColumns, tableMatches, matchesTableOnPageChangeHandler, matchesTableOnPageChangeSizeHandler, matchesTdPropsHandler, /* array */[]))), match$1 ? currentMatchInfo(matchesInfo.currentMatch) : React.createElement("div", undefined, "No match selected"));
              } else {
                tableMatchesJSX = React.createElement("div", undefined, React.createElement("button", {
                          className: "button button--large",
                          id: "showGetMatchList",
                          onClick: handleGetMatchListClick
                        }, "Show Matches List"));
              }
              var matchesInfoArea = loginInfo.loggedIn ? React.createElement("div", undefined, React.createElement("h2", {
                          className: "operator-page-heading"
                        }, sectionHeading), React.createElement("div", undefined, tableMatchesJSX)) : null;
              return React.createElement("div", undefined, matchesInfoArea);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.others, jsProps.sectionHeading, jsProps.loginInfo, jsProps.apiInfo, jsProps.matchesInfo, jsProps.getMatchesList, jsProps.hideMatchesList, jsProps.showMatchesListDownloadLink, jsProps.hideMatchesListDownloadLink, jsProps.setInfoMatchesList, jsProps.hideExpiredMatchesList, jsProps.hideConfirmedMatchesList, jsProps.showCurrentMatch, jsProps.hideCurrentMatch, jsProps.showMatchForCurrentDriver, jsProps.showMatchForCurrentRider, /* array */[]);
      }));

exports.component = component;
exports.tableType = tableType;
exports.matchTableColumns = matchTableColumns;
exports.tableMatch = tableMatch;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
